{"version":3,"sources":["components/Search/Search.js","components/UserCard/UserCard.js","utils/API.js","components/DataTable/DataTable.js","components/SearchContainer/SearchContainer.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","UserCard","firstName","lastName","picture","phone","email","dob","scope","alt","src","axios","get","DataTable","headings","handleSort","map","width","key","style","SearchContainer","state","result","filter","filterBy","currentSort","sortField","filterEmployees","searchKey","console","log","filterResult","person","setState","event","preventDefault","target","handleSortChange","order","Users","sort","a","d","undefined","first","localeCompare","API","then","res","data","results","e","i","medium","last","date","catch","err","this","item","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1b2c9650.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Search(props) {\r\n  return (\r\n      <>\r\n        <div className=\"searchbox\">\r\n        <input\r\n            onChange={props.handleInputChange}\r\n            value={props.search}\r\n            name=\"search\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search for a Employee\"\r\n            id=\"search\"\r\n        />\r\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\r\n          Search\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n  \r\n};\r\n\r\nexport default Search;","import React from \"react\";\r\n\r\nfunction UserCard({ firstName, lastName, picture, phone, email, dob }) {\r\n  return (\r\n    <tr>\r\n        <th scope= \"row\"><img alt= {picture} src= {picture} /></th>\r\n        <td className= \"col-md-3\"> {firstName} {lastName}</td>\r\n        <td className= \"col-md-3\"> {phone}</td>\r\n        <td className= \"col-md-3\"> {email}</td>\r\n        <td className= \"col-md-3\"> {dob}</td>\r\n    </tr>\r\n    );\r\n}\r\n\r\nexport default UserCard;","//using a random user generator API for data \r\nimport axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=50&nat=us\";\r\n\r\n\r\nexport default {\r\n  search: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};","import React from \"react\";\r\n\r\nimport \"./DataTable.css\";\r\n\r\n\r\nconst DataTable = ({headings, handleSort}) => {\r\n  \r\n\r\n  return (\r\n<>\r\n  <thead>\r\n    <tr>\r\n      {headings.map(({ name, width }) => {\r\n        return (\r\n          <th\r\n            className=\"col\"\r\n            key={name}\r\n            style={{ width }}\r\n            onClick={() => {\r\n              \r\n              handleSort(name);\r\n            }}\r\n          >\r\n            {name}\r\n            <span onClick = {handleSort} className=\"pointer\"></span>\r\n          </th>\r\n        );\r\n      })}\r\n    </tr>\r\n  </thead>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default DataTable;","import React, { Component } from \"react\";\r\nimport Search from \"../Search/Search\";\r\nimport UserCard from \"../UserCard/UserCard\";\r\nimport API from \"../../utils/API\";\r\nimport \"./Result.css\"\r\nimport DataTable from \"../DataTable/DataTable\";\r\n\r\nclass SearchContainer extends Component {\r\n  state = {\r\n    result: [],\r\n    filter: \"\",\r\n    filterBy: [{}],\r\n    currentSort: \"descend\",\r\n    sortField: \"\"\r\n    };\r\n    headings = [\r\n      { name: \"Image\", width: \"20%\" },\r\n      { name: \"Name\", width: \"40%\" },\r\n      { name: \"Phone\", width: \"40%\" },\r\n      { name: \"Email\", width: \"30%\" },\r\n      { name: \"DOB\", width: \"30%\" }\r\n    ]\r\n  // When this component mounts, search the employee API for list of employees\r\n  componentDidMount() {\r\n    \r\n    API.search()\r\n    .then(res => {\r\n        console.log(res)\r\n        this.setState({\r\n          result: res.data.results.map((e, i) => ({\r\n            picture: e.picture.medium,\r\n            firstName: e.name.first,\r\n            lastName: e.name.last,\r\n            phone: e.phone,\r\n            email: e.email,\r\n            dob: e.dob.date,\r\n            key: i\r\n          }))\r\n        })\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n//making the ability to allow the user to filter the employees\r\n  filterEmployees = (searchKey) => {\r\n    console.log(searchKey);\r\n    console.log(this.state.result);\r\n    //by using this.state.result is will render the values of what is being searched\r\n    var filterResult = this.state.result.filter(person => person.firstName === searchKey)\r\n    \r\n    this.setState({\r\n        result: filterResult\r\n    })\r\n}\r\n//when the form is submitted it is searching the API for what was typed\r\n  handleFormSubmit = event => {\r\n      event.preventDefault();\r\n     \r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    console.log(value);\r\n    console.log(name);\r\n\r\n    this.filterEmployees(value);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n    // //calling/using filterEmployees function\r\n    this.filterEmployees(value);\r\n    this.filterEmployees(this.state.search);\r\n  };\r\n\r\nhandleInputChange = event => {\r\n    event.preventDefault();\r\n    console.log(event);\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n    //console.log(value);\r\n   // console.log(name);\r\n    \r\n    this.setState({\r\n\r\n      [name]: value\r\n\r\n    });\r\n  };\r\n\r\nhandleSortChange = name => {\r\n  if (this.state.currentSort === \"descend\"){\r\n    this.setState({order: \"ascend\"})\r\n  } else {this.setState({order: \"descend\"})\r\n  }\r\n  // a and d ascend and descend\r\n  const compare= (a,d) => {\r\n    if(this.state.currentSort === \"ascend\"){\r\n      if (a[name] === undefined){\r\n        return 1\r\n      } else if(d[name] === undefined){\r\n        return -1\r\n      } else if(name === \"name\"){\r\n        return a[name].first.localeCompare(d[name].first)\r\n      }else{\r\n        return a[name]-d[name]\r\n      }\r\n    } else {\r\n        if(a[name] === undefined){\r\n          return 1\r\n        }else if (d[name] === undefined){\r\n          return -1\r\n        }else if (name === \"name\"){\r\n          return d[name].first.localeCompare(a[name].first)\r\n        } else{\r\n          return d[name]-a[name]\r\n        }\r\n    }\r\n  }\r\n  const Users = this.state.filterBy.sort(compare);\r\n  this.setState({filterBy: Users});\r\n};\r\n\r\n  render() {\r\n    return (\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                  <h2>Employee Directory</h2>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                  <Search\r\n                    value={this.state.search}\r\n                     handleInputChange={this.handleInputChange}\r\n                     handleFormSubmit={this.handleFormSubmit}\r\n                     />\r\n                </div>\r\n              </div>\r\n\r\n        <div className=\"row\">\r\n          <table className=\"table\">\r\n          <DataTable\r\n                  headings = {this.headings}\r\n                  handleSort = {this.handleSortChange}\r\n                />\r\n            <tbody>\r\n             \r\n        {[...this.state.result].map((item) =>\r\n              <UserCard\r\n                picture={item.picture}\r\n                firstName={item.firstName}\r\n                lastName={item.lastName}\r\n                email={item.email}\r\n                phone={item.phone}\r\n                dob = {item.dob}\r\n                key={item.key}\r\n              />\r\n            )}\r\n          </tbody>\r\n             \r\n        </table>\r\n      </div>\r\n  </div>\r\n    );\r\n  };\r\n};\r\n      \r\n\r\nexport default SearchContainer;","import React from \"react\";\nimport SearchContainer from \"./components/SearchContainer/SearchContainer\";\n    \n    function App() {\n      return <SearchContainer />;\n    }\n    \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}